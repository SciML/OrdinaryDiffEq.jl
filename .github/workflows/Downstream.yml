name: IntegrationTest
on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:

jobs:
  test:
    name: ${{ matrix.package.repo }}/${{ matrix.package.group }}/${{ matrix.julia-version }}
    runs-on: ${{ matrix.os }}
    env:
      GROUP: ${{ matrix.package.group }}
    strategy:
      fail-fast: false
      matrix:
        julia-version: [1]
        os: [ubuntu-latest]
        package:
          - {user: SciML, repo: DelayDiffEq.jl, group: Interface}
          - {user: SciML, repo: DelayDiffEq.jl, group: Integrators}
          - {user: SciML, repo: DelayDiffEq.jl, group: Regression}
          - {user: SciML, repo: StochasticDiffEq.jl, group: Interface1}
          - {user: SciML, repo: StochasticDiffEq.jl, group: Interface2}
          - {user: SciML, repo: StochasticDiffEq.jl, group: Interface3}
          - {user: SciML, repo: StochasticDiffEq.jl, group: AlgConvergence}
          - {user: SciML, repo: DiffEqCallbacks.jl, group: All}
          - {user: SciML, repo: SciMLSensitivity.jl, group: Core1}
          - {user: SciML, repo: SciMLSensitivity.jl, group: Core2}
          - {user: SciML, repo: SciMLSensitivity.jl, group: Core3}
          - {user: SciML, repo: SciMLSensitivity.jl, group: Core4}
          - {user: SciML, repo: SciMLSensitivity.jl, group: Core5}
          - {user: SciML, repo: ModelingToolkit.jl, group: All}
          - {user: SciML, repo: DiffEqDevTools.jl, group: Core}
          - {user: nathanaelbosch, repo: ProbNumDiffEq.jl, group: Downstream}
          - {user: SKopecz, repo: PositiveIntegrators.jl, group: Downstream}

    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: x64
      # Explicitly develop the libraries first before running the tests for now.
      # This is necessary since the tests are likely to fail otherwise, given that all
      # the libs haven't been registered yet.
      - name: "Develop the libraries since they haven't been registered yet"
        run: |
          julia --project=. -e '
              using Pkg;
              Pkg.develop(map(path ->Pkg.PackageSpec.(;path="$(@__DIR__)/lib/$(path)"), readdir("./lib")));
          '
      - name: Clone Downstream
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.package.user }}/${{ matrix.package.repo }}
          path: downstream
      - name: Load this and run the downstream tests
        shell: julia --color=yes --project=downstream {0}
        run: |
          using Pkg
          try
            # force it to use this PR's version of the package
            Pkg.develop(PackageSpec(path="."))  # resolver may fail with main deps
            Pkg.update()
            Pkg.test(coverage=true)  # resolver may fail with test time deps
          catch err
            err isa Pkg.Resolve.ResolverError || rethrow()
            # If we can't resolve that means this is incompatible by SemVer and this is fine
            # It means we marked this as a breaking change, so we don't need to worry about
            # mistakenly introducing a breaking change, as we have intentionally made one
            @info "Not compatible with this release. No problem." exception=err
            exit(0)  # Exit immediately, as a success
          end
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
          fail_ci_if_error: true
