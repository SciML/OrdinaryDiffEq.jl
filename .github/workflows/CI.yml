name: CI
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.group == 'Downstream' }}
    strategy:
      fail-fast: false
      matrix:
        group:
          - InterfaceI
          - InterfaceII
          - InterfaceIII
          - Integrators_I
          - AlgConvergence_I
          - AlgConvergence_II
          - AlgConvergence_III
          - Downstream
          - ODEInterfaceRegression
          - Multithreading

          - OrdinaryDiffEqAdamsBashforthMoulton
          - OrdinaryDiffEqBDF
          - OrdinaryDiffEqCore
          - OrdinaryDiffEqDefault
          - OrdinaryDiffEqDifferentiation
          - OrdinaryDiffEqExplicitRK
          - OrdinaryDiffEqExponentialRK
          - OrdinaryDiffEqExtrapolation
          - OrdinaryDiffEqFIRK
          - OrdinaryDiffEqFeagin
          - OrdinaryDiffEqFunctionMap
          - OrdinaryDiffEqHighOrderRK
          - OrdinaryDiffEqIMEXMultistep
          - OrdinaryDiffEqLinear
          - OrdinaryDiffEqLowOrderRK
          - OrdinaryDiffEqLowStorageRK
          - OrdinaryDiffEqNordsieck
          - OrdinaryDiffEqPDIRK
          - OrdinaryDiffEqPRK
          - OrdinaryDiffEqQPRK
          - OrdinaryDiffEqRKN
          - OrdinaryDiffEqRosenbrock
          - OrdinaryDiffEqSDIRK
          - OrdinaryDiffEqSSPRK
          - OrdinaryDiffEqStabilizedIRK
          - OrdinaryDiffEqStabilizedRK
          - OrdinaryDiffEqSymplecticRK
          - OrdinaryDiffEqTsit5
          - OrdinaryDiffEqVerner

        version:
          - 'lts'
          - '1'
          - 'pre'
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      # Explicitly develop the libraries first before running the tests for now.
      # This is necessary since the tests are likely to fail otherwise, given that all
      # the libs haven't been registered yet.
      - name: "Develop the libraries since they haven't been registered yet"
        run: |
          julia --project=. -e '
              using Pkg;
              Pkg.develop(map(path ->Pkg.PackageSpec.(;path="$(@__DIR__)/lib/$(path)"), readdir("./lib")));
          '
      - uses: julia-actions/julia-runtest@v1
        with:
          coverage: false
          check_bounds: auto
        env:
          GROUP: ${{ matrix.group }}
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
          fail_ci_if_error: true
